{
  "classes": {
    "Item": {
      "name": "Item",
      "filename": "lib/Item.coffee",
      "srcUrl": null,
      "sections": [
        {
          "name": "Attributes",
          "description": ""
        },
        {
          "name": "Body Text",
          "description": ""
        },
        {
          "name": "Outline Structure",
          "description": ""
        },
        {
          "name": "Mutating Outline Structure",
          "description": ""
        },
        {
          "name": "Debug",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "cloneItem",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Deep clones this item.",
          "description": "Deep clones this item.",
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns a duplicate {Item}."
            }
          ]
        },
        {
          "name": "hasAttribute",
          "sectionName": "Attributes",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Test to see if this item has an attribute with the given name.",
          "description": "Test to see if this item has an attribute with the given name.",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} attribute name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}"
            }
          ]
        },
        {
          "name": "attribute",
          "sectionName": "Attributes",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Get the value of the specified attribute. If the attribute does\nnot exist will return `undefined`.",
          "description": "Get the value of the specified attribute. If the attribute does\nnot exist will return `undefined`.",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} attribute name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns attribute value or ``."
            }
          ]
        },
        {
          "name": "setAttribute",
          "sectionName": "Attributes",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Adds a new attribute or changes the value of an existing\nattribute. `id` is reserved and an exception is thrown if your try to set\nit.",
          "description": "Adds a new attribute or changes the value of an existing\nattribute. `id` is reserved and an exception is thrown if your try to set\nit.",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} attribute name.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "value",
              "description": "The new attribute value. ",
              "type": null,
              "isOptional": false
            }
          ]
        },
        {
          "name": "attributedBodyTextSubstring",
          "sectionName": "Body Text",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "location",
              "description": "Substring's strart location.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "length",
              "description": "Length of substring to extract. ",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "AttributedString",
              "description": "Returns an {AttributedString} substring of this item's body text."
            }
          ]
        },
        {
          "name": "elementAtBodyTextIndex",
          "sectionName": "Body Text",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Looks to see if there's an element with the given `tagName` at the\ngiven index. If there is then that element's attributes are returned and\nby reference the range over which the element applies.",
          "description": "Looks to see if there's an element with the given `tagName` at the\ngiven index. If there is then that element's attributes are returned and\nby reference the range over which the element applies.",
          "arguments": [
            {
              "name": "tagName",
              "description": "Tag name of the element.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "index",
              "description": "The character index.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "effectiveRange",
              "description": "{Object} whose `location` and `length`  properties will be set to effective range of element.",
              "type": "Object",
              "isOptional": true
            },
            {
              "name": "longestEffectiveRange",
              "description": "{Object} whose `location` and `length`  properties will be set to longest effective range of element.",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns elements attribute values as an {Object} or {}"
            }
          ]
        },
        {
          "name": "elementsAtBodyTextIndex",
          "sectionName": "Body Text",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "index",
              "description": "The character index.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "effectiveRange",
              "description": "{Object} whose `location` and `length`  properties will be set to effective range of element.",
              "type": "Object",
              "isOptional": true
            },
            {
              "name": "longestEffectiveRange",
              "description": "{Object} whose `location` and `length`  properties will be set to longest effective range of element. ",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} with keys for each element at the given\ncharacter index, and by reference the range over which the elements apply."
            }
          ]
        },
        {
          "name": "addElementInBodyTextRange",
          "sectionName": "Body Text",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Adds an element with the given tagName and attributes to the\ncharacters in the specified range.",
          "description": "Adds an element with the given tagName and attributes to the\ncharacters in the specified range.",
          "arguments": [
            {
              "name": "tagName",
              "description": "Tag name of the element.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "attributes",
              "description": "Element attributes. Use `null` as a placeholder if element  doesn't need attributes.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "location",
              "description": "Start location character index.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "length",
              "description": "Range length. ",
              "type": null,
              "isOptional": false
            }
          ]
        },
        {
          "name": "removeElementInBodyTextRange",
          "sectionName": "Body Text",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Removes the element with the tagName from the characters in the\nspecified range.",
          "description": "Removes the element with the tagName from the characters in the\nspecified range.",
          "arguments": [
            {
              "name": "tagName",
              "description": "Tag name of the element.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "location",
              "description": "Start location character index.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "length",
              "description": "Range length. ",
              "type": null,
              "isOptional": false
            }
          ]
        },
        {
          "name": "replaceBodyTextInRange",
          "sectionName": "Body Text",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Replace body text in the given range.",
          "description": "Replace body text in the given range.",
          "arguments": [
            {
              "name": "insertedText",
              "description": "{String} or {AttributedString}",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "location",
              "description": "Start location character index.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "length",
              "description": "Range length. ",
              "type": null,
              "isOptional": false
            }
          ]
        },
        {
          "name": "contains",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Determins if this item contains the given item.",
          "description": "Determins if this item contains the given item.",
          "arguments": [
            {
              "name": "item",
              "description": "The {Item} to check for containment.",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns {Boolean}."
            }
          ]
        },
        {
          "name": "comparePosition",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Compares the position of this item against another item in the\noutline. See\n[Node.compareDocumentPosition()](https://developer.mozilla.org/en-\nUS/docs/Web/API/Node.compareDocumentPosition) for more information.",
          "description": "Compares the position of this item against another item in the\noutline. See\n[Node.compareDocumentPosition()](https://developer.mozilla.org/en-\nUS/docs/Web/API/Node.compareDocumentPosition) for more information.",
          "arguments": [
            {
              "name": "item",
              "description": "The {Item} to compare against.",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} bitmask."
            }
          ]
        },
        {
          "name": "insertChildBefore",
          "sectionName": "Mutating Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Insert the new child item before the referenced sibling in this\nitem's list of children. If referenceSibling isn't defined the item is\ninserted at the end.",
          "description": "Insert the new child item before the referenced sibling in this\nitem's list of children. If referenceSibling isn't defined the item is\ninserted at the end.",
          "arguments": [
            {
              "name": "child",
              "description": "The inserted child {Item} .",
              "type": "Item",
              "isOptional": false
            },
            {
              "name": "referenceSibling",
              "description": "The referenced sibling {Item} . ",
              "type": "Item",
              "isOptional": true
            }
          ]
        },
        {
          "name": "insertChildrenBefore",
          "sectionName": "Mutating Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Insert the new children before the referenced sibling\nin this item's list of children. If referenceSibling isn't defined the new\nchildren are inserted at the end.",
          "description": "Insert the new children before the referenced sibling\nin this item's list of children. If referenceSibling isn't defined the new\nchildren are inserted at the end.",
          "arguments": [
            {
              "name": "children",
              "description": "{Array} of {Item}s to insert.",
              "type": "Array",
              "isOptional": false
            },
            {
              "name": "referenceSibling",
              "description": "The referenced sibling {Item}. ",
              "type": "Item",
              "isOptional": true
            }
          ]
        },
        {
          "name": "appendChildren",
          "sectionName": "Mutating Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Append the new children to this item's list of children.",
          "description": "Append the new children to this item's list of children.",
          "arguments": [
            {
              "name": "children",
              "description": "The children {Array} to append. ",
              "type": "Array",
              "isOptional": false
            }
          ]
        },
        {
          "name": "appendChild",
          "sectionName": "Mutating Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Append the new child to this item's list of children.",
          "description": "Append the new child to this item's list of children.",
          "arguments": [
            {
              "name": "child",
              "description": "The child {Item} to append. ",
              "type": "Item",
              "isOptional": false
            }
          ]
        },
        {
          "name": "removeChildren",
          "sectionName": "Mutating Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Remove the children from this item's list of children.",
          "description": "Remove the children from this item's list of children.",
          "arguments": [
            {
              "name": "children",
              "description": "The {Array} of children {Items}s to remove. ",
              "type": "Array",
              "isOptional": false
            }
          ]
        },
        {
          "name": "removeChild",
          "sectionName": "Mutating Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Remove the given child from this item's list of children.",
          "description": "Remove the given child from this item's list of children.",
          "arguments": [
            {
              "name": "child",
              "description": "The child {Item} to remove. ",
              "type": "Item",
              "isOptional": false
            }
          ]
        },
        {
          "name": "removeFromParent",
          "sectionName": "Mutating Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Remove this item from it's parent item if it has a parent. ",
          "description": "Remove this item from it's parent item if it has a parent. "
        },
        {
          "name": "branchToString",
          "sectionName": "Debug",
          "srcUrl": null,
          "visibility": "Extended",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns debug string for this branch."
            }
          ]
        },
        {
          "name": "branchToHTML",
          "sectionName": "Debug",
          "srcUrl": null,
          "visibility": "Extended",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns debug HTML string for this branch."
            }
          ]
        },
        {
          "name": "toString",
          "sectionName": "Debug",
          "srcUrl": null,
          "visibility": "Extended",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns debug string for this item."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [
        {
          "name": "id",
          "sectionName": "Attributes",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only unique and persistent {String} ID. ",
          "description": "Read-only unique and persistent {String} ID. "
        },
        {
          "name": "attributeNames",
          "sectionName": "Attributes",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only {Array} of this item's attribute names. ",
          "description": "Read-only {Array} of this item's attribute names. "
        },
        {
          "name": "bodyText",
          "sectionName": "Body Text",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Body text as plain text {String}. ",
          "description": "Body text as plain text {String}. "
        },
        {
          "name": "bodyHTML",
          "sectionName": "Body Text",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Body text as HTML {String}. ",
          "description": "Body text as HTML {String}. "
        },
        {
          "name": "attributedBodyText",
          "sectionName": "Body Text",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Body text as {AttributedString}. ",
          "description": "Body text as {AttributedString}. "
        },
        {
          "name": "isRoot",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only true if is root {Item}. ",
          "description": "Read-only true if is root {Item}. "
        },
        {
          "name": "isInOutline",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only true if item is part of owning {Outline} ",
          "description": "Read-only true if item is part of owning {Outline} "
        },
        {
          "name": "parent",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only parent {Item}. ",
          "description": "Read-only parent {Item}. "
        },
        {
          "name": "firstChild",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only first child {Item}. ",
          "description": "Read-only first child {Item}. "
        },
        {
          "name": "lastChild",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only last child {Item}. ",
          "description": "Read-only last child {Item}. "
        },
        {
          "name": "previousSibling",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only previous sibling {Item}. ",
          "description": "Read-only previous sibling {Item}. "
        },
        {
          "name": "nextSibling",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only next sibling {Item}. ",
          "description": "Read-only next sibling {Item}. "
        },
        {
          "name": "previousBranch",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only previous branch {Item}. ",
          "description": "Read-only previous branch {Item}. "
        },
        {
          "name": "nextBranch",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only next branch {Item}. ",
          "description": "Read-only next branch {Item}. "
        },
        {
          "name": "ancestors",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only ancestor items {Array}. ",
          "description": "Read-only ancestor items {Array}. "
        },
        {
          "name": "descendants",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only descendant items {Array}. ",
          "description": "Read-only descendant items {Array}. "
        },
        {
          "name": "lastDescendant",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only last descendant {Item}. ",
          "description": "Read-only last descendant {Item}. "
        },
        {
          "name": "previousItem",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only previous {Item} in outline order. ",
          "description": "Read-only previous {Item} in outline order. "
        },
        {
          "name": "nextItem",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only next {Item} in outline order. ",
          "description": "Read-only next {Item} in outline order. "
        },
        {
          "name": "hasChildren",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only {Boolean} ",
          "description": "Read-only {Boolean} "
        },
        {
          "name": "children",
          "sectionName": "Outline Structure",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only child items {Array}. ",
          "description": "Read-only child items {Array}. "
        }
      ],
      "visibility": "Essential",
      "summary": "A paragraph of text in an {Outline}.",
      "description": "A paragraph of text in an {Outline}.\n\nItems cannot be instantiated directly, instead use {Outline::createItem}.\n\nItems may contain other child items to form a hiearchical outline structure.\nWhen you move an item all of it's children are moved with it.\n\nItems have a single paragraph of body text. You can access it as plain text,\na HTML string, or an AttributedString. You can add formatting to make parts\nof the text bold, italic, etc.\n\nYou can assign item level attributes to items. For example you might store a\ndue date in the `data-due-date` attribute. Or store an item type in the\n`data-type` attribute.",
      "examples": [
        {
          "description": "Create Items:",
          "lang": "coffeescript",
          "code": "item = outline.createItem('Hello World!')\noutline.root.appendChild(item)",
          "raw": "```coffeescript\nitem = outline.createItem('Hello World!')\noutline.root.appendChild(item)\n```"
        },
        {
          "description": "Add body text formatting:",
          "lang": "coffeescript",
          "code": "item = outline.createItem('Hello World!')\nitem.addElementInBodyTextRange('B', {}, 6, 5)\nitem.addElementInBodyTextRange('I', {}, 0, 11)",
          "raw": "```coffeescript\nitem = outline.createItem('Hello World!')\nitem.addElementInBodyTextRange('B', {}, 6, 5)\nitem.addElementInBodyTextRange('I', {}, 0, 11)\n```"
        },
        {
          "description": "Read body text formatting:",
          "lang": "coffeescript",
          "code": "effectiveRange = end: 0\ntextLength = item.bodyText.length\nwhile effectiveRange.end < textLength\n  console.log item.elementsAtBodyTextIndex effectiveRange.end, effectiveRange",
          "raw": "```coffeescript\neffectiveRange = end: 0\ntextLength = item.bodyText.length\nwhile effectiveRange.end < textLength\n  console.log item.elementsAtBodyTextIndex effectiveRange.end, effectiveRange\n```"
        }
      ]
    },
    "Outline": {
      "name": "Outline",
      "filename": "lib/Outline.coffee",
      "srcUrl": null,
      "sections": [
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Finding Outlines",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Reading Items",
          "description": ""
        },
        {
          "name": "Creating Items",
          "description": ""
        },
        {
          "name": "Querying Items",
          "description": ""
        },
        {
          "name": "Grouping Changes",
          "description": ""
        },
        {
          "name": "Undo",
          "description": ""
        },
        {
          "name": "File Details",
          "description": ""
        },
        {
          "name": "File Content Operations",
          "description": ""
        }
      ],
      "classMethods": [
        {
          "name": "outlineForID",
          "sectionName": "Finding Outlines",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "id",
              "description": "{String} outline id. ",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Outline",
              "description": "Returns existing {Outline} instance with the given outline id."
            }
          ]
        },
        {
          "name": "outlineForFilePath",
          "sectionName": "Finding Outlines",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "filePath",
              "description": "{String} outline file path. ",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Outline",
              "description": "Returns existing {Outline} instance with the given file path."
            }
          ]
        }
      ],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Create a new outline. ",
          "description": "Create a new outline. "
        },
        {
          "name": "onDidChange",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Invoke the given callback when the outline changes.",
          "description": "Invoke the given callback when the outline changes.\n\nSee {Outline} Examples for an example of subscribing to {OutlineChange}s.",
          "arguments": [
            {
              "children": [
                {
                  "name": "event",
                  "description": "{OutlineChange} event.",
                  "type": "OutlineChange",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the outline changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidConflict",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Invoke the given callback when the in-memory contents of the\noutline become in conflict with the contents of the file on disk.",
          "description": "Invoke the given callback when the in-memory contents of the\noutline become in conflict with the contents of the file on disk.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the outline enters conflict.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeModified",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Invoke the given callback when the value of {::isModified} changes.",
          "description": "Invoke the given callback when the value of {::isModified} changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "modified",
                  "description": "{Boolean} indicating whether the outline is modified.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when {::isModified} changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangePath",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Invoke the given callback when the value of {::getPath} changes.",
          "description": "Invoke the given callback when the value of {::getPath} changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "path",
                  "description": "{String} representing the outline's current path on disk.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the path changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillSave",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Invoke the given callback before the outline is saved to disk.",
          "description": "Invoke the given callback before the outline is saved to disk.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called before the outline is saved.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidSave",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Invoke the given callback after the outline is saved to disk.",
          "description": "Invoke the given callback after the outline is saved to disk.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "path",
                      "description": "The path to which the outline was saved.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called after the outline is saved.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillReload",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Invoke the given callback before the outline is reloaded from the\ncontents of its file on disk.",
          "description": "Invoke the given callback before the outline is reloaded from the\ncontents of its file on disk.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called before the outline is reloaded.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidReload",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Invoke the given callback after the outline is reloaded from the\ncontents of its file on disk.",
          "description": "Invoke the given callback after the outline is reloaded from the\ncontents of its file on disk.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called after the outline is reloaded.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Invoke the given callback when the outline is destroyed.",
          "description": "Invoke the given callback when the outline is destroyed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the outline is destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "items",
          "sectionName": "Reading Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of all {Item}s in the outline (except the\nroot) in outline order."
            }
          ]
        },
        {
          "name": "itemForID",
          "sectionName": "Reading Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "id",
              "description": "{String} id. ",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns {Item} for given id."
            }
          ]
        },
        {
          "name": "itemsForIDs",
          "sectionName": "Reading Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "ids",
              "description": "{Array} of ids. ",
              "type": "Array",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns {Array} of {Item}s for given {Array} of ids."
            }
          ]
        },
        {
          "name": "createItem",
          "sectionName": "Creating Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Create a new item. The new item is owned by this outline, but is\nnot yet inserted into it so it won't be visible until you insert it.",
          "description": "Create a new item. The new item is owned by this outline, but is\nnot yet inserted into it so it won't be visible until you insert it.",
          "arguments": [
            {
              "name": "text",
              "description": "{String} or {AttributedString}. ",
              "type": "String",
              "isOptional": true
            }
          ]
        },
        {
          "name": "itemsForXPath",
          "sectionName": "Querying Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "XPath query internal HTML structure for matching {Items}.",
          "description": "XPath query internal HTML structure for matching {Items}.\n\nItems are considered to match if they, or if a node contained in their\nbody text matches the XPath.",
          "arguments": [
            {
              "name": "xpathExpression",
              "description": "{String} xpath expression",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "namespaceResolver",
              "description": "{String}",
              "type": "String",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of all {Item} matching the\n[XPath](https://developer.mozilla.org/en-US/docs/Web/XPath) expression."
            }
          ]
        },
        {
          "name": "evaluateXPath",
          "sectionName": "Querying Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "XPath query internal HTML structure.",
          "description": "XPath query internal HTML structure.\n\nThis query evaluates on the underlying HTMLDocument. Please refere to the\nstandard [document.evaluate](https://developer.mozilla.org/en-\nUS/docs/Web/API/document.evaluate) documentation for details.",
          "arguments": [
            {
              "name": "xpathExpression",
              "description": "{String} xpath expression",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "namespaceResolver",
              "description": "",
              "type": null,
              "isOptional": true
            },
            {
              "name": "resultType",
              "description": "",
              "type": null,
              "isOptional": true
            },
            {
              "name": "result",
              "description": "",
              "type": null,
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns an [XPathResult](https://developer.mozilla.org/en-\nUS/docs/XPathResult) based on an [XPath](https://developer.mozilla.org/en-\nUS/docs/Web/XPath) expression and other given parameters."
            }
          ]
        },
        {
          "name": "isUpdating",
          "sectionName": "Grouping Changes",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "true",
              "description": "Returns {true} if outline is updating."
            }
          ]
        },
        {
          "name": "beginUpdates",
          "sectionName": "Grouping Changes",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Begin grouping changes into a single {OutlineChange} event. Must\nlater call {::endUpdates} to balance this call. ",
          "description": "Begin grouping changes into a single {OutlineChange} event. Must\nlater call {::endUpdates} to balance this call. "
        },
        {
          "name": "endUpdates",
          "sectionName": "Grouping Changes",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "End grouping changes. Must call to balance a previous\n{::beginUpdates} call. ",
          "description": "End grouping changes. Must call to balance a previous\n{::beginUpdates} call. "
        },
        {
          "name": "undo",
          "sectionName": "Undo",
          "srcUrl": null,
          "visibility": "Essential",
          "summary": "Undo the last change. ",
          "description": "Undo the last change. "
        },
        {
          "name": "redo",
          "sectionName": "Undo",
          "srcUrl": null,
          "visibility": "Essential",
          "summary": "Redo the last change. ",
          "description": "Redo the last change. "
        },
        {
          "name": "isModified",
          "sectionName": "File Details",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Determine if the in-memory contents of the outline differ from its\ncontents on disk.",
          "description": "Determine if the in-memory contents of the outline differ from its\ncontents on disk.\n\nIf the outline is unsaved, always returns `true` unless the outline is\nempty.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "isInConflict",
          "sectionName": "File Details",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Determine if the in-memory contents of the outline conflict with the\non-disk contents of its associated file.",
          "description": "Determine if the in-memory contents of the outline conflict with the\non-disk contents of its associated file.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "getPath",
          "sectionName": "File Details",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Get the path of the associated file.",
          "description": "Get the path of the associated file.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "setPath",
          "sectionName": "File Details",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Set the path for the outlines's associated file.",
          "description": "Set the path for the outlines's associated file.",
          "arguments": [
            {
              "name": "filePath",
              "description": "A {String} representing the new file path ",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "save",
          "sectionName": "File Content Operations",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Save the outline. ",
          "description": "Save the outline. "
        },
        {
          "name": "saveAs",
          "sectionName": "File Content Operations",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Save the outline at a specific path.",
          "description": "Save the outline at a specific path.",
          "arguments": [
            {
              "name": "filePath",
              "description": "The path to save at. ",
              "type": null,
              "isOptional": false
            }
          ]
        },
        {
          "name": "reload",
          "sectionName": "File Content Operations",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Reload the outlines's contents from disk.",
          "description": "Reload the outlines's contents from disk.\n\nSets the outlines's content to the cached disk contents "
        }
      ],
      "classProperties": [],
      "instanceProperties": [
        {
          "name": "id",
          "sectionName": "Finding Outlines",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only unique, but not persistent, {String} ID. ",
          "description": "Read-only unique, but not persistent, {String} ID. "
        }
      ],
      "visibility": "Essential",
      "summary": "A mutable outline of {Item}'s.",
      "description": "A mutable outline of {Item}'s.\n\nUse outlines to create new items, find existing items, and watch for changes\nin items. Outlines also coordinate loading and saving items.\n\nInternally outlines uses a HTMLDocument with a restricted (Folding Text\nMarkup Language) set of HTML to store the underlying outline data. You\nshould never modify the content of this HTMLDocument directly, but you can\nquery it using {::evaluateXPath}. Read more about [Folding Text Markup\nLanguage]().",
      "examples": [
        {
          "description": "Group multiple changes into a single {OutlineChange}:",
          "lang": "coffeescript",
          "code": "outline.beginUpdates()\nroot = outline.root\nroot.appendChild outline.createItem()\nroot.appendChild outline.createItem()\nroot.firstChild.bodyText = 'first'\nroot.lastChild.bodyText = 'last'\noutline.endUpdates()",
          "raw": "```coffeescript\noutline.beginUpdates()\nroot = outline.root\nroot.appendChild outline.createItem()\nroot.appendChild outline.createItem()\nroot.firstChild.bodyText = 'first'\nroot.lastChild.bodyText = 'last'\noutline.endUpdates()\n```"
        },
        {
          "description": "Watch for outline changes:",
          "lang": "coffeescript",
          "code": "disposable = outline.onDidChange (e) ->\n  for delta in e.deltas\n    switch delta.type\n      when 'attributes'\n        console.log delta.attributeName\n      when 'bodyText'\n        console.log delta.target.bodyText\n      when 'children'\n        console.log delta.addedItems\n        console.log delta.removedItems",
          "raw": "```coffeescript\ndisposable = outline.onDidChange (e) ->\n  for delta in e.deltas\n    switch delta.type\n      when 'attributes'\n        console.log delta.attributeName\n      when 'bodyText'\n        console.log delta.target.bodyText\n      when 'children'\n        console.log delta.addedItems\n        console.log delta.removedItems\n```"
        },
        {
          "description": "Use XPath to list all items with bold text:",
          "lang": "coffeescript",
          "code": "for each in outline.itemsForXPath('//li/p//b')\n  console.log each",
          "raw": "```coffeescript\nfor each in outline.itemsForXPath('//li/p//b')\n  console.log each\n```"
        }
      ]
    },
    "OutlineChange": {
      "name": "OutlineChange",
      "filename": "lib/OutlineChange.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [
        {
          "name": "deltas",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "{Array} of {OutlineChangeDelta}s. ",
          "description": "{Array} of {OutlineChangeDelta}s. "
        }
      ],
      "visibility": "Essential",
      "summary": "An {Outline} change event.",
      "description": "An {Outline} change event.\n\nThis event is fired after an Outline has changed and {Outline::endUpdates()}\nis called. Individual {OutlineChangeDelta}s are accessed through\n{OutlineChange::deltas}.\n\nSee {Outline} Examples for an example of subscribing to {OutlineChange}s. "
    },
    "OutlineChangeDelta": {
      "name": "OutlineChangeDelta",
      "filename": "lib/OutlineChangeDelta.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [
        {
          "name": "type",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only type of change. `attributes`, 'bodyText', or 'children'. ",
          "description": "Read-only type of change. `attributes`, 'bodyText', or 'children'. "
        },
        {
          "name": "target",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only target {Item} of change. ",
          "description": "Read-only target {Item} of change. "
        },
        {
          "name": "addedItems",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only {Item} children added to target. ",
          "description": "Read-only {Item} children added to target. "
        },
        {
          "name": "removedItems",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only {Item} children removed from target. ",
          "description": "Read-only {Item} children removed from target. "
        },
        {
          "name": "previousSibling",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only previous sibling of the added or removed Items, or null. ",
          "description": "Read-only previous sibling of the added or removed Items, or null. "
        },
        {
          "name": "nextSibling",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only next sibling of the added or removed Items, or null. ",
          "description": "Read-only next sibling of the added or removed Items, or null. "
        },
        {
          "name": "attributeName",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only name of changed attribute, or null. ",
          "description": "Read-only name of changed attribute, or null. "
        },
        {
          "name": "attributeOldValue",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only previous value of changed attribute, or null. ",
          "description": "Read-only previous value of changed attribute, or null. "
        }
      ],
      "visibility": "Public",
      "summary": "Outline Change Delta.",
      "description": "Outline Change Delta.\n\nRepresents a single change in a target {Item}. There are three types of\nchanges that can occure: an attribute changed, the body text changed, or the\nitem's children changed.\n\nSee {Outline} Examples for an example of subscribing to {OutlineChange}s. "
    },
    "OutlineEditor": {
      "name": "OutlineEditor",
      "superClass": "Model",
      "filename": "lib/OutlineEditor.coffee",
      "srcUrl": null,
      "sections": [
        {
          "name": "Model",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Hoisting Items",
          "description": ""
        },
        {
          "name": "Expanding Items",
          "description": ""
        },
        {
          "name": "Item Visibility",
          "description": ""
        },
        {
          "name": "Focus",
          "description": ""
        },
        {
          "name": "Selection",
          "description": ""
        },
        {
          "name": "Insert Items",
          "description": ""
        },
        {
          "name": "Undo",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidChangeTitle",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Essential",
          "summary": "Calls your `callback` when the editor's oultine title has\nchanged.",
          "description": "Calls your `callback` when the editor's oultine title has\nchanged.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangePath",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Essential",
          "summary": "Calls your `callback` when the editor's outline path, and\ntherefore title, has changed.",
          "description": "Calls your `callback` when the editor's outline path, and\ntherefore title, has changed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChange",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Invoke the given callback when the editor's outline changes.",
          "description": "Invoke the given callback when the editor's outline changes.\n\nSee {Outline} Examples for an example of subscribing to {OutlineChange}s.",
          "arguments": [
            {
              "children": [
                {
                  "name": "event",
                  "description": "{OutlineChange} event.",
                  "type": "OutlineChange",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the outline changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeModified",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Extended",
          "summary": "Calls your `callback` when the result of {::isModified} changes.",
          "description": "Calls your `callback` when the result of {::isModified} changes.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidConflict",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Extended",
          "summary": "Calls your `callback` when the editor's outline's underlying\nfile changes on disk at a moment when the result of {::isModified} is\ntrue.",
          "description": "Calls your `callback` when the editor's outline's underlying\nfile changes on disk at a moment when the result of {::isModified} is\ntrue.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidSave",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Invoke the given callback after the editor's outline is saved to\ndisk.",
          "description": "Invoke the given callback after the editor's outline is saved to\ndisk.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "path",
                      "description": "The path to which the buffer was saved.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called after the buffer is saved.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Invoke the given callback when the editor is destroyed.",
          "description": "Invoke the given callback when the editor is destroyed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the editor is destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "hoistedItem",
          "sectionName": "Hoisting Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns the current hoisted {Item}."
            }
          ]
        },
        {
          "name": "hoist",
          "sectionName": "Hoisting Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Push a new hoisted {Item}.",
          "description": "Push a new hoisted {Item}.",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} to hoist. ",
              "type": "Item",
              "isOptional": false
            }
          ]
        },
        {
          "name": "unhoist",
          "sectionName": "Hoisting Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Pop the current hoisted {Item}. ",
          "description": "Pop the current hoisted {Item}. "
        },
        {
          "name": "isExpanded",
          "sectionName": "Expanding Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} to test. ",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns true if the item is expanded."
            }
          ]
        },
        {
          "name": "isCollapsed",
          "sectionName": "Expanding Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} to test. ",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns true if the item is collapsed."
            }
          ]
        },
        {
          "name": "setExpanded",
          "sectionName": "Expanding Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Expand the given items in this editor.",
          "description": "Expand the given items in this editor.",
          "arguments": [
            {
              "name": "items",
              "description": "{Item} or {Array} of items. ",
              "type": "Item",
              "isOptional": false
            }
          ]
        },
        {
          "name": "setCollapsed",
          "sectionName": "Expanding Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Collapse the given items in this editor.",
          "description": "Collapse the given items in this editor.",
          "arguments": [
            {
              "name": "items",
              "description": "{Item} or {Array} of items. ",
              "type": "Item",
              "isOptional": false
            }
          ]
        },
        {
          "name": "firstVisibleItem",
          "sectionName": "Item Visibility",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns first visible {Item} in editor."
            }
          ]
        },
        {
          "name": "lastVisibleItem",
          "sectionName": "Item Visibility",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns last visible {Item} in editor."
            }
          ]
        },
        {
          "name": "isVisible",
          "sectionName": "Item Visibility",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Determine if an {Item} is visible. An item is visible if it\ndescends from the current hoisted item, and it isn't filtered, and all\nancestors up to hoisted node are expanded.",
          "description": "Determine if an {Item} is visible. An item is visible if it\ndescends from the current hoisted item, and it isn't filtered, and all\nancestors up to hoisted node are expanded.",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} to test.",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns {Boolean} indicating if item is visible."
            }
          ]
        },
        {
          "name": "makeVisible",
          "sectionName": "Item Visibility",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Make the given item visible in the outline, expanding ancestors,\nremoving filter, and unhoisting as needed.",
          "description": "Make the given item visible in the outline, expanding ancestors,\nremoving filter, and unhoisting as needed.",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} to make visible. ",
              "type": "Item",
              "isOptional": false
            }
          ]
        },
        {
          "name": "previousVisibleSibling",
          "sectionName": "Item Visibility",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} ",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns previous visible sibling {Item} relative to given item."
            }
          ]
        },
        {
          "name": "nextVisibleSibling",
          "sectionName": "Item Visibility",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} ",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns next visible sibling {Item} relative to given item."
            }
          ]
        },
        {
          "name": "nextVisibleItem",
          "sectionName": "Item Visibility",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} ",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns next visible {Item} relative to given item."
            }
          ]
        },
        {
          "name": "previousVisibleItem",
          "sectionName": "Item Visibility",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} ",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns previous visible {Item} relative to given item."
            }
          ]
        },
        {
          "name": "firstVisibleChild",
          "sectionName": "Item Visibility",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} ",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns first visible child {Item} relative to given item."
            }
          ]
        },
        {
          "name": "lastVisibleChild",
          "sectionName": "Item Visibility",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} ",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns last visible child {Item} relative to given item."
            }
          ]
        },
        {
          "name": "previousVisibleBranch",
          "sectionName": "Item Visibility",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} ",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns previous visible branch {Item} relative to given item."
            }
          ]
        },
        {
          "name": "nextVisibleBranch",
          "sectionName": "Item Visibility",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} ",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns next visible branch {Item} relative to given item."
            }
          ]
        },
        {
          "name": "isFocused",
          "sectionName": "Focus",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns {Boolean} indicating if this editor has focus."
            }
          ]
        },
        {
          "name": "focus",
          "sectionName": "Focus",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Focus this editor. ",
          "description": "Focus this editor. "
        },
        {
          "name": "isSelected",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "item",
              "description": "{Item} ",
              "type": "Item",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns {Boolean} indicating if given item is selected."
            }
          ]
        },
        {
          "name": "isItemMode",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns `true` if is selecting at item level."
            }
          ]
        },
        {
          "name": "isTextMode",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns `true` if is selecting at text level."
            }
          ]
        },
        {
          "name": "moveBackward",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Move selection backward. ",
          "description": "Move selection backward. "
        },
        {
          "name": "moveBackwardAndModifySelection",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Move selection backward and modify selection. ",
          "description": "Move selection backward and modify selection. "
        },
        {
          "name": "moveForward",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Move selection forward. ",
          "description": "Move selection forward. "
        },
        {
          "name": "moveForwardAndModifySelection",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Move selection forward and modify selection. ",
          "description": "Move selection forward and modify selection. "
        },
        {
          "name": "moveUp",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Move selection up. ",
          "description": "Move selection up. "
        },
        {
          "name": "moveUpAndModifySelection",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Move selection up and modify selection. ",
          "description": "Move selection up and modify selection. "
        },
        {
          "name": "moveDown",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Move selection down. ",
          "description": "Move selection down. "
        },
        {
          "name": "moveDownAndModifySelection",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Move selection down and modify selection. ",
          "description": "Move selection down and modify selection. "
        },
        {
          "name": "moveToBeginningOfLine",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Move selection to begining of line. ",
          "description": "Move selection to begining of line. "
        },
        {
          "name": "moveToBeginningOfLineAndModifySelection",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Move selection to begining of line and modify selection. ",
          "description": "Move selection to begining of line and modify selection. "
        },
        {
          "name": "moveToBeginningOfParagraph",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Move selection to begining of paragraph. ",
          "description": "Move selection to begining of paragraph. "
        },
        {
          "name": "moveToBeginningOfParagraphAndModifySelection",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Move selection to begining of paragraph and modify selection. ",
          "description": "Move selection to begining of paragraph and modify selection. "
        },
        {
          "name": "moveSelectionRange",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Set a new selection range.",
          "description": "Set a new selection range.",
          "arguments": [
            {
              "name": "focusItem",
              "description": "Selection focus {Item}",
              "type": "Item",
              "isOptional": false
            },
            {
              "name": "focusOffset",
              "description": "Selection focus offset index. Or `undefined`  when selecting at item level.",
              "type": null,
              "isOptional": true
            },
            {
              "name": "anchorItem",
              "description": "Selection anchor {Item}",
              "type": "Item",
              "isOptional": true
            },
            {
              "name": "anchorOffset",
              "description": "Selection anchor offset index. Or `undefined`  when selecting at item level. ",
              "type": null,
              "isOptional": true
            }
          ]
        },
        {
          "name": "extendSelectionRange",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Extend the selection range to a new focus item/offset.",
          "description": "Extend the selection range to a new focus item/offset.",
          "arguments": [
            {
              "name": "focusItem",
              "description": "Selection focus {Item}",
              "type": "Item",
              "isOptional": false
            },
            {
              "name": "focusOffset",
              "description": "Selection focus offset index. Or `undefined`  when selecting at item level. ",
              "type": null,
              "isOptional": true
            }
          ]
        },
        {
          "name": "insertText",
          "sectionName": "Insert Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Insert text at current selection. If is in text selection mode the\ncurrent text selection will get replaced with this text. If in item\nselection mode a new item will get inserted.",
          "description": "Insert text at current selection. If is in text selection mode the\ncurrent text selection will get replaced with this text. If in item\nselection mode a new item will get inserted.",
          "arguments": [
            {
              "name": "text",
              "description": "Text {String} or {AttributedString} to insert ",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "insertItem",
          "sectionName": "Insert Items",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Insert item at current selection.",
          "description": "Insert item at current selection.",
          "arguments": [
            {
              "name": "text",
              "description": "Text {String} or {AttributedString} for new item.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Item",
              "description": "Returns the new {Item}."
            }
          ]
        },
        {
          "name": "undo",
          "sectionName": "Undo",
          "srcUrl": null,
          "visibility": "Essential",
          "summary": "Undo the last change. ",
          "description": "Undo the last change. "
        },
        {
          "name": "redo",
          "sectionName": "Undo",
          "srcUrl": null,
          "visibility": "Essential",
          "summary": "Redo the last change. ",
          "description": "Redo the last change. "
        }
      ],
      "classProperties": [],
      "instanceProperties": [
        {
          "name": "outline",
          "sectionName": "Model",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "The {Outline} that is being edited. ",
          "description": "The {Outline} that is being edited. "
        },
        {
          "name": "selection",
          "sectionName": "Selection",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Read-only current {OutlineEditorSelection}. ",
          "description": "Read-only current {OutlineEditorSelection}. "
        }
      ],
      "visibility": "Public",
      "summary": "Editor for {Outline}s.",
      "description": "Editor for {Outline}s.\n\nMaintains all editing state for the outline incuding: hoisted items,\nfiltering items, expanded items, and item selection.\n\nA single {Outline} can belong to multiple editors. For example, if the same\nfile is open in two different panes, Atom creates a separate editor for each\npane. If the outline is manipulated the changes are reflected in both\neditors, but each maintains its own selection, expanded items, etc.\n\n## Accessing OutlineEditor Instances\n\nThe easiest way to get hold of `OutlineEditor` objects is by registering a\ncallback with `::observeOutlineEditors` on the `atom.workspace` global. Your\ncallback will then be called with all current editor instances and also when\nany editor is created in the future.\n\n```coffeescript\ndisposable = atom.workspace.observeOutlineEditors (editor) ->\n  editor.insertItem('Hello World!')\n```"
    },
    "OutlineEditorService": {
      "name": "OutlineEditorService",
      "filename": "lib/OutlineEditorService.coffee",
      "srcUrl": null,
      "sections": [
        {
          "name": "Classes",
          "description": ""
        },
        {
          "name": "Workspace Outline Editors",
          "description": ""
        }
      ],
      "classMethods": [
        {
          "name": "getOutlineEditors",
          "sectionName": "Workspace Outline Editors",
          "srcUrl": null,
          "visibility": "Essential",
          "summary": "Get all outline editors in the workspace.",
          "description": "Get all outline editors in the workspace.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {OutlineEditor}s."
            }
          ]
        },
        {
          "name": "getOutlineEditorsForOutline",
          "sectionName": "Workspace Outline Editors",
          "srcUrl": null,
          "visibility": "Essential",
          "summary": "Get all outline editors for a given outine the workspace.",
          "description": "Get all outline editors for a given outine the workspace.",
          "arguments": [
            {
              "name": "outline",
              "description": "The {Outline} to search for.",
              "type": "Outline",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {OutlineEditor}s."
            }
          ]
        },
        {
          "name": "onDidAddOutlineEditor",
          "sectionName": "Workspace Outline Editors",
          "srcUrl": null,
          "visibility": "Extended",
          "summary": "Invoke the given callback when an outline editor is added to the\nworkspace.",
          "description": "Invoke the given callback when an outline editor is added to the\nworkspace.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "outlineEditor",
                      "description": "{OutlineEditor} that was added.",
                      "type": "OutlineEditor",
                      "isOptional": false
                    },
                    {
                      "name": "pane",
                      "description": "{Pane} containing the added outline editor.",
                      "type": "Pane",
                      "isOptional": false
                    },
                    {
                      "name": "index",
                      "description": "{Number} indicating the index of the added outline editor in its pane.",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called panes are added.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "observeOutlineEditors",
          "sectionName": "Workspace Outline Editors",
          "srcUrl": null,
          "visibility": "Essential",
          "summary": "Invoke the given callback with all current and future outline\neditors in the workspace.",
          "description": "Invoke the given callback with all current and future outline\neditors in the workspace.",
          "arguments": [
            {
              "children": [
                {
                  "name": "editor",
                  "description": "An {OutlineEditor} that is present in {::getOutlineEditors}  at the time of subscription or that is added at some later time.",
                  "type": "OutlineEditor",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called with current and future outline  editors.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        }
      ],
      "instanceMethods": [],
      "classProperties": [
        {
          "name": "Item",
          "sectionName": "Classes",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "{Item} Class ",
          "description": "{Item} Class "
        },
        {
          "name": "Outline",
          "sectionName": "Classes",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "{Outline} Class ",
          "description": "{Outline} Class "
        },
        {
          "name": "OutlineEditor",
          "sectionName": "Classes",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "{OutlineEditor} Class ",
          "description": "{OutlineEditor} Class "
        },
        {
          "name": "OutlineLiveQuery",
          "sectionName": "Classes",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "{OutlineLiveQuery} Class ",
          "description": "{OutlineLiveQuery} Class "
        },
        {
          "name": "WorkspaceLiveQuery",
          "sectionName": "Classes",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "{WorkspaceLiveQuery} Class ",
          "description": "{WorkspaceLiveQuery} Class "
        }
      ],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "This is the service object provided by the `outline-editor-\nservice`.",
      "description": "This is the service object provided by the `outline-editor-\nservice`.\n\nAtom allows packages to interact with each other through a [services\nAPI](https://atom.io/docs/latest/creating-a-package#interacting-with-other-\npackages-via-services). If you want to write a package that enhances the\noutline editor your package should subscribe to the `outline-editor-service`\nas show below. It will then have access a OutlineEditorService instance.\n\n## Subscribe to the Outline Editor Service\n\nSubscribe in your packages `package.json`:\n\n```json\n\"consumedServices\": {\n  \"outine-editor-service\": {\n    \"versions\": {\n      \"^1.0.0\": \"consumeOutlineEditorService\"\n    }\n  }\n}\n```\n\nImplement the service's callback in your main module:\n\n```coffeescript\nconsumeOutlineEditorService: (outlineEditorService) ->\n  @outlineEditorService = outlineEditorService\n  new Disposable =>\n    @outlineEditorService = null\n```"
    },
    "OutlineLiveQuery": {
      "name": "OutlineLiveQuery",
      "superClass": "LiveQuery",
      "filename": "lib/livequeries/OutlineLiveQuery.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "A live query. ",
      "description": "A live query. "
    },
    "WorkspaceLiveQuery": {
      "name": "WorkspaceLiveQuery",
      "superClass": "LiveQuery",
      "filename": "lib/livequeries/WorkspaceLiveQuery.coffee",
      "srcUrl": null,
      "sections": [
        {
          "name": "Configuring Queries",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "setXPathExpression",
          "sectionName": "Configuring Queries",
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Set new xpath expression and schedule an update if the query is\nstarted. ",
          "description": "Set new xpath expression and schedule an update if the query is\nstarted. "
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "A live query over all {Outline}s in a {Workspace}. ",
      "description": "A live query over all {Outline}s in a {Workspace}. "
    }
  }
}